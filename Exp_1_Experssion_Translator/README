Function:   Read a in-fix expression as input,
            then transform it into a post-fix
            expression.
Input:      Legal in-fix expression containing
            constants, variables, '+', '-', '*',
            '/' and parenthesis. Variables start
            with a letter and contain only
            letters and digits.
            E.g. 5 + ((31 * t1) - 5) / (6 - 1)
Output:     Corresponding post-fix expression
            containing constants, variables,
            '+', '-', '*' and '/'.
Original Grammar:
            expr    --> expr + term    {print('+')}
                     |  expr - term    {print('-')}
                     |  term
            term    --> term * factor  {print('*')}
                     |  term / factor  {print('/')}
                     |  factor
            factor  --> ( expr )
                     |  id              {print(lexeme)}
                     |  num             {print(tokenVal)}

Translation Scheme with Left-recursive Eliminated:
            expr    --> term rest
            rest    --> + term {print'+'} rest
                     |  - term {print'-'} rest
                     |  EMPTY
            term    --> factor section
            section --> * factor {print'*'} section
                     |  / factor {print'/'} section
                     |  EMPTY
            factor  --> ( expr )
                     |  id              {print(lexeme)}
                     |  num             {print(tokenVal)}
